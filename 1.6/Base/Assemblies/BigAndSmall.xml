<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BigAndSmall</name>
    </assembly>
    <members>
        <member name="M:BigAndSmall.ConditionalManager.TestConditionals(Verse.Gene,System.Collections.Generic.List{BigAndSmall.PawnExtension})">
            <summary>
            This methods fetches the Gene Extension, which makes it marginally slower than the one which just takes a List of ConditionalStatAffecters.
            </summary>
        </member>
        <member name="M:BigAndSmall.BSCache.GetDefaultCache">
            <summary>
            For use by the Prepatcher.
            </summary>
        </member>
        <member name="F:BigAndSmall.BSCache.complexHeadOffsets">
            <summary>
            If populated should always have 4 items, one for each rotation.
            </summary>
        </member>
        <member name="F:BigAndSmall.BSCache.isBloodFeeder">
            <summary>
            This one returns true on stuff like bloodless pawns just so they can't have blood drained from them.
            </summary>
        </member>
        <member name="F:BigAndSmall.BSCache.banAddictions">
            <summary>
            Banns addictions that are not whitelisted or better.
            </summary>
        </member>
        <member name="M:BigAndSmall.BSCache.DelayedUpdate">
            <summary>
            Stuff that should be run a bit later. Typically 1 tick. This also has the benefit that it will never run more than once per tick.
            
            Anything that we don't need to figure out RIGHT NOW. Can go here.
            
            More stuff should probably be moved here. Delaying stuff helps dealing with issues like genes being appended on-by-one.
            </summary>
        </member>
        <member name="T:BigAndSmall.BSCache.SizeChangeType">
            <summary>
            Used to get more realistic results from size changes.
            F.ex. most things scale quadratically, but weight/health scales by cube.
            
            Technically a Rimworld Scale isn't really linear, but this type of change gives fairly good values when going upwards.
            Downwards is another story though, and we don't want small pawns to get utterly obliterated if something looks at the wrong.
            </summary>
        </member>
        <member name="P:BigAndSmall.BS.Tick">
            <summary>
            Used when you need to make sure ticks aren't randomly skipped. Thanks Ludeon or whatever mod causes this. Ó_ò
            </summary>
        </member>
        <member name="M:BigAndSmall.BSCacheExtensions.GetCachePrepatched(Verse.Pawn)">
            <summary>
            Gets the cache in the fastest way possible. Can generate a new cache if needed on creation but never refreshes it.
            </summary>
        </member>
        <member name="M:BigAndSmall.BSCacheExtensions.GetCachePrepatchedThreaded(Verse.Pawn)">
            <summary>
            The threaded version of GetCache is for use on rendering threads where we DON'T want to regenerate the cache.
            </summary>
        </member>
        <member name="T:BigAndSmall.DictCache`2">
            <summary>
            A quick method for making a cache without having to rewrite the same verbose code over and over.
            </summary>
            <typeparam name="T">The value you want to act as the key of the dictionary</typeparam>
            <typeparam name="V">A class whcih implements the ICachable Interface</typeparam>
        </member>
        <member name="M:BigAndSmall.DictCache`2.GetCacheInner(`0,System.Boolean@,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="forceRefresh"></param>
            <param name="canRegenerate">The Cache will not be regenerated, if one does not exist it will simply return default values.</param>
            <returns></returns>
        </member>
        <member name="M:BigAndSmall.HumanoidPawnScaler.GetInvalidateLater(Verse.Pawn,System.Int32)">
            <summary>
            ForceRefresh and get the cache... later, unless paused. If pasued get it now. Mostly to force updates when in character editor, etc.
            </summary>
        </member>
        <member name="M:BigAndSmall.HumanoidPawnScaler.GetCache(Verse.Pawn,System.Boolean,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Note that if the pawn is "null" then it will use a generic cache with default values. This is mostly to just get rid of the need to
            null-check everything that calls this method.
            </summary>
            <returns></returns>
        </member>
        <member name="T:BigAndSmall.DamageWorker_TwoThirdsDamage">
            <summary>
            Used to make Rimworld's attack picker think the attack deals 50% more damage than it actually does.
            </summary>
        </member>
        <member name="T:BigAndSmall.DamageWorker_HalfDamage">
            <summary>
            Used to make Rimworld's attack picker think the attack deals 100% more damage than it actually does.
            </summary>
        </member>
        <member name="T:BigAndSmall.DamageWorker_OuterAndHalfDamage">
            <summary>
            Basically this Damageworker deals only half as much damage and attacks only the outer body parts.
            </summary>
        </member>
        <member name="T:BigAndSmall.ModDefPatcher">
            <summary>
            Patch defs in other mods. And things related to defs.
            </summary>
        </member>
        <member name="T:BigAndSmall.HumanLikes">
            <summary>
            Patch defs in other mods. And things related to defs.
            </summary>
        </member>
        <member name="M:BigAndSmall.HumanlikeAnimalGenerator.GenerateAndRegisterHumanlikeAnimal(Verse.PawnKindDef,Verse.ThingDef,System.Boolean)">
            <summary>
            Generate a humanlike animal from an AnimalThing and HumanThing.
            
            Generally we want to grab most stuff from the human, and transfer mostly the body and some traits from the animal.
            </summary>
            <param name="aniPawnKind">ThingKindDef of an Animal.</param>
            <param name="humThing">ThingDef of a Humanlike (likely always the defautl "Human")</param>
            <param name="hotReload">Whether or not this is in context of a hotreload.</param>
        </member>
        <member name="M:BigAndSmall.RaceFuser.CreateMergedBodyTypes(System.Boolean)">
            <summary>
            Merge body parts.
            </summary>
        </member>
        <member name="F:BigAndSmall.SimilarParts.similarity">
            <summary>
            Avoid very low values unless you don't want them to merge.
            </summary>
        </member>
        <member name="F:BigAndSmall.MergableBody.priority">
            <summary>
            Which order this will be merged in. Put weird stuff with a higher priority.
            
            It is likely better that weird bodies are bodyOne so that a snake-hybrid starts with a snake body rather than trying to replace the legs.
            </summary>
        </member>
        <member name="M:BigAndSmall.GenderMethods.UpdatePawnHairAndHeads(Verse.Pawn)">
            <summary>
            This is some old questionable method to clean up broken pawns.
            
            Probably best to leave it alone for now... It doesn't seem to break anything and might still fix something important.
            </summary>
        </member>
        <member name="T:BigAndSmall.NewFoodCategory">
            <summary>
            This is a list of food categories that a pawn may or may not be able to eat.
            The default assumption is that they can not.
            </summary>
        </member>
        <member name="M:BigAndSmall.DietPatch.PostIngested_Transpiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction})">
            <summary>
            This is a patch that fixes so small characters don't overdose so easily.
            
            It will also make cats and whatever not overdose on beer all the time, but arguably that's a good thing, because it... was stupid.
            </summary>
            <returns></returns>
        </member>
        <member name="T:BigAndSmall.CompAbilityEffect_DraculBite">
            <summary>
            Bite and apply Vampirism
            </summary>
        </member>
        <member name="T:BigAndSmall.CompAbilityEffect_DraculInfect">
            <summary>
            Just apply a bunch of Vampirism.
            </summary>
        </member>
        <member name="T:BigAndSmall.CompAbilityEffect_LycanInfect">
            <summary>
            Just apply a bunch of Vampirism.
            </summary>
        </member>
        <member name="F:BigAndSmall.ApparelRestrictions.thingDefs">
            <summary>
            Obsoleted because it had issues with cases where ApparelProperties were used with no access to the thing.
            </summary>
        </member>
        <member name="F:BigAndSmall.ApparelRestrictions.apparelLayers">
            <summary>
            OnSkin, Shell, Middle, etc.
            </summary>
        </member>
        <member name="F:BigAndSmall.ApparelRestrictions.bodyPartGroups">
            <summary>
            Torso, Legs, LeftHand, etc.
            </summary>
        </member>
        <member name="M:BigAndSmall.ApparelRestrictions.CanWear(RimWorld.ApparelProperties,BigAndSmall.FilteredLists.FilterResult@)">
            <summary>
            Returns the error if not, otherwise returns null.
            </summary>
        </member>
        <member name="M:BigAndSmall.ApparelRestrictions.CanWear(Verse.ThingDef)">
            <summary>
            Returns the error if not, otherwise returns null.
            </summary>
        </member>
        <member name="M:BigAndSmall.ModExtHelper.GetAllGeneExtensions``1(Verse.Pawn,System.Collections.Generic.List{System.Type},System.Collections.Generic.List{System.Type},System.Boolean)">
            <summary>
            Also includes inactive genes.
            </summary>
        </member>
        <member name="T:BigAndSmall.PawnExtensionDef">
            <summary>
            Simple class to hold shared PawnExtensions.
            </summary>
        </member>
        <member name="F:BigAndSmall.PawnExtension.priority">
            <summary>
            The order in which this extension is applied.
            Higher numbers are applied later, which means they can in some cases overwrite earlier extensions.
            </summary>
        </member>
        <member name="F:BigAndSmall.PawnExtension.conditionals">
            <summary>
            Used by PGenes. If it evaluates to False the gene will disable itself.
            Useful for werewolf-like beaviour, or genes that deactivate if not drunk or something.
            </summary>
        </member>
        <member name="F:BigAndSmall.PawnExtension.invert">
            <summary>
            Used by the above. Inverts the conditional
            </summary>
        </member>
        <member name="F:BigAndSmall.PawnExtension.renderCacheOff">
            <summary>
            Turns off the zoomed-out render cache for the pawn. Useful if your pawn graphics might otherwise get cut off.
            </summary>
        </member>
        <member name="F:BigAndSmall.PawnExtension.applyBodyHediff">
            <summary>
            Used by Genes. When the gene is added/activated it will apply these hediffs to the pawn.
            </summary>
        </member>
        <member name="F:BigAndSmall.PawnExtension.applyPartHediff">
            <summary>
            Same as above but applies to specific bodyparts.
            </summary>
        </member>
        <member name="F:BigAndSmall.PawnExtension.thingDefSwap">
            <summary>
            This is the magic thing that makes the pawn swap to a different ThingDef. E.g. "Race".
            </summary>
        </member>
        <member name="F:BigAndSmall.PawnExtension.forceThingDefSwap">
            <summary>
            Forces the swap to the ThingDef. If false, it will be cautious to avoid accidentally turning robots into
            biological snake-people, etc. If in doubt, leave this as false.
            </summary>
        </member>
        <member name="F:BigAndSmall.PawnExtension.hiddenGenes">
            <summary>
            Used by Genes. A bit of a miseleading name.
            The listed genes will be added to the pawn when this gene is added.
            When removed the genes will be removed as well.
            
            It was originally used to make genes with multiple sets of graphics, but it can be used nowadays to "bundle" genes.
            </summary>
        </member>
        <member name="F:BigAndSmall.PawnExtension.nullsThoughts">
            <summary>
            All the listed thoughts will be nulled.
            
            It is suggested to not add too many of these to a gene since they WILL show in the tooltip. Hediffs don't have this issue.
            </summary>
        </member>
        <member name="F:BigAndSmall.PawnExtension.apparelRestrictions">
            <summary>
            Sets what apparel the pawn can wear. Check in the class for more details.
            </summary>
        </member>
        <member name="F:BigAndSmall.PawnExtension.animalFineManipulation">
            <summary>
            If found on an animal's raceTracker it will be considered to have fine-manipulation ability.
            E.g. able to use guns. Highest value will be used. E.g. a bionic with 1.0 will make the pawn always avoid penalties.
            </summary>
        </member>
        <member name="F:BigAndSmall.PawnExtension.transformGene">
            <summary>
            Transforms the pawn into a specific xenotype under some conditions.
            Currently used by the hidden Grigori gene to trigger potential Nephilim transformation in hybrid kids.
            </summary>
        </member>
        <member name="F:BigAndSmall.PawnExtension.sizeByAge">
            <summary>
            Applies a size curve to the age of the pawn. Can be used to change how big they are at different ages.
            </summary>
            
        </member>
        <member name="F:BigAndSmall.PawnExtension.sizeByAgeMult">
            <summary>
            Same as above, but multiplies the size by the curve.
            </summary>
        </member>
        <member name="F:BigAndSmall.PawnExtension.aptitudes">
            <summary>
            Works about the same as Rimworld's aptitudes. Let's you add skill-offsets to genes/hediffs/races.
            </summary>
        </member>
        <member name="F:BigAndSmall.PawnExtension.preventHeadScaling">
            <summary>
            Prevents head-scaling/offsets from sources other than the pawn's general size.
            </summary>
        </member>
        <member name="F:BigAndSmall.PawnExtension.bodyConstantHeadScale">
            <summary>
            Prevents auto-scaling the pawn's head from changing body-size sources other than explicit headscale.
            This means large pawns won't get slightly smaller heads, and small ones won't get a chibi-head.
            
            Basically just a more specific version of the above.
            </summary>
        </member>
        <member name="F:BigAndSmall.PawnExtension.bodyConstantHeadScaleBigOnly">
            <summary>
            Exactly the same as the above, but permits big head if the body is small.
            </summary>
        </member>
        <member name="F:BigAndSmall.PawnExtension.preventHeadScalingFactor">
            <summary>
            If specified, instead of blocking scale it will be reduced by this factor.
            </summary>
        </member>
        <member name="F:BigAndSmall.PawnExtension.bodyMaterial">
            <summary>
            Sets a custom material for the body. Highly versatile.
            </summary>
        </member>
        <member name="F:BigAndSmall.PawnExtension.headMaterial">
            <summary>
            Sets a custom material for the head. Highly versatile.
            </summary>
        </member>
        <member name="F:BigAndSmall.PawnExtension.bodyPaths">
            <summary>
            Sets the path(s) of the body. Can be per body type, gender, etc.
            You can for example set a list of paths to be used by male hulks only.
            </summary>
        </member>
        <member name="F:BigAndSmall.PawnExtension.headPaths">
            <summary>
            Same as above.
            </summary>
        </member>
        <member name="F:BigAndSmall.PawnExtension.hideHumanlikeRenderNodes">
            <summary>
            If set this lets you disabe a renderNode type on the pawn.
            </summary>
        </member>
        <member name="F:BigAndSmall.PawnExtension.forceGender">
            <summary>
            Makes the pawn consider the pawn female for rendering purposes.
            Useful for compatibility. Despite the name, it also affects the head.
            </summary>
        </member>
        <member name="F:BigAndSmall.PawnExtension.pawnDiet">
            <summary>
            Set what the pawn can eat. By default assumes human diet.
            </summary>
        </member>
        <member name="F:BigAndSmall.PawnExtension.pawnDietRacialOverride">
            <summary>
            If true this will make the race's "PawnDiet" be ignored in favor of other diets.
            
            </summary>
        </member>
        <member name="F:BigAndSmall.PawnExtension.babyBirthCount">
            <summary>
            How many babies the pawn will give birth to. If null, it will use normal counts.
            Note that this is better than the vanilla options since it will re-randomize the gene list for each additional
            baby instead of making them clones.
            </summary>
        </member>
        <member name="F:BigAndSmall.PawnExtension.babyStartAge">
            <summary>
            What "practical" age the baby born at. Creatures that give birth to less helpless offspring may want to start at 3.
            Insects that are born fully formed could start at 10, 13, or even 20.
            Consider combining with sizeByAgeMult to make the babies a plausible size.
            </summary>
        </member>
        <member name="F:BigAndSmall.PawnExtension.pregnancySpeedMultiplier">
            <summary>
            How fast pregnancy progresses. 1 is normal, 0.5 is half speed, 2 is double speed.
            </summary>
        </member>
        <member name="F:BigAndSmall.PawnExtension.soulFalloffStart">
            Stats
        </member>
        <member name="F:BigAndSmall.PawnExtension.bodyPosOffset">
            <summary>
            Offsets the entire pawn's body up or down.
            </summary>
        </member>
        <member name="F:BigAndSmall.PawnExtension.headPosMultiplier">
            <summary>
            Offsets the head up or down relative to the body.
            </summary>
        </member>
        <member name="F:BigAndSmall.PawnExtension.bodyDrawData">
            <summary>
            Only the basic offsets will be respected at the moment. Supporting all is a performance hit.
            </summary>
        </member>
        <member name="F:BigAndSmall.PawnExtension.canWalkOnCreep">
            <summary>
            Lets the pawn walk on VFE's creep. Only works on genes.
            </summary>
        </member>
        <member name="F:BigAndSmall.PawnExtension.forceUnarmed">
            <summary>
            Can hold melee weapons, but will only use natural/bionic attacks.
            </summary>
        </member>
        <member name="F:BigAndSmall.PawnExtension.consumeSoulOnHit">
            <summary>
            Trigger the soul-consume effect on hit.
            </summary>
        </member>
        <member name="F:BigAndSmall.PawnExtension.meatOverride">
            <summary>
            If set the pawn will be butchered for this meat instead of the default.
            </summary>
        </member>
        <member name="F:BigAndSmall.PawnExtension.butcherProducts">
            <summary>
            If set the following extra products will be created when the pawn is butchered.
            </summary>
        </member>
        <member name="F:BigAndSmall.PawnExtension.isUnliving">
            <summary>
            Pawn will be considered...
            </summary>
        </member>
        <member name="F:BigAndSmall.PawnExtension.isDrone">
            <summary>
            Makes colonists care less about the pawn's death, and the pawn care less about death in general.
            </summary>
        </member>
        <member name="F:BigAndSmall.PawnExtension.banAddictionsByDefault">
            <summary>
            If set to true the pawn will default to blocking additctions unless white/allowlisted.
            </summary>
        </member>
        <member name="F:BigAndSmall.PawnExtension.metamorphTarget">
            <summary>
            Target to (possibly) morph to.
            </summary>
        </member>
        <member name="F:BigAndSmall.PawnExtension.retromorphTarget">
            <summary>
            Same as above, but for morphing "backwards". Currently only used for juvenlie forms based on age.
            E.g. Queens giving birth to drones.
            </summary>
        </member>
        <member name="F:BigAndSmall.PawnExtension.metamorphAtAge">
            <summary>
            Trigger Metamorph at this age.
            </summary>
        </member>
        <member name="F:BigAndSmall.PawnExtension.retromorphUnderAge">
            <summary>
            Trigger Retromorph if less than this age.
            </summary>
        </member>
        <member name="F:BigAndSmall.PawnExtension.lockedNeeds">
            <summary>
            Lock a Needbar at a certain level. Often more compatible than just removing them.
            </summary>
        </member>
        <member name="F:BigAndSmall.PawnExtension.disableFacialAnimations">
            <summary>
            Disable Nal's facial animations on the pawn and restore their original head.
            </summary>
        </member>
        <member name="F:BigAndSmall.PawnExtension.facialDisabler">
            <summary>
            More granular version of the above. Currently not working after a Nal's update.
            </summary>
        </member>
        <member name="F:BigAndSmall.PawnExtension.forcedHediffs">
            <summary>
            Force-adds these hediffs. Removes when race is removed.
            </summary>
        </member>
        <member name="F:BigAndSmall.PawnExtension.forcedTraits">
            <summary>
            Force-adds these traits.
            </summary>
        </member>
        <member name="F:BigAndSmall.PawnExtension.forcedEndogenes">
            <summary>
            Adds endogenes to the pawn. Ensures they are always present.
            </summary>
        </member>
        <member name="F:BigAndSmall.PawnExtension.immutableEndogenes">
            <summary>
            Same as above, but also removes anything that would overwrite them
            </summary>
        </member>
        <member name="F:BigAndSmall.PawnExtension.forcedXenogenes">
            <summary>
            Adds xenogenes to the pawn. Ensures they are always present.
            </summary>
        </member>
        <member name="F:BigAndSmall.PawnExtension.geneFilters">
            <summary>
            Filters (removes) based on filtering settings
            </summary>
        </member>
        <member name="F:BigAndSmall.PawnExtension.activeGeneFilters">
            <summary>
            These filters don't remove the gene, but simply block it from being activated.
            </summary>
        </member>
        <member name="F:BigAndSmall.PawnExtension.randomSkinGenes">
            <summary>
            These are just for generating pawns. They are most useful on custom races, not on genes/hediffs.
            Don't forget that is also inherits the props from "CompProperties_ColorAndFur".
            
            Should work even without biotech
            </summary>;
        </member>
        <member name="M:BigAndSmall.PawnExtension.IsGeneLegal(Verse.GeneDef,System.Boolean)">
            <summary>
            Checks if a gene is legal for the pawn.
            </summary>
            <param name="gene"></param>
            <param name="removalCheck">If true the gene will be removed when failing legality check. Otherwise it will just be disabled.</param>
            <returns></returns>
        </member>
        <member name="F:BigAndSmall.PawnKindExtension.generateHumanlikeAnimalFromThis">
            <summary>
            Generate a "humanlike animal" dummy based on this PawnKindDef.
            Used to treat the pawn as if it had been generated from an animal.
            </summary>
        </member>
        <member name="F:BigAndSmall.HARCompat.harThings">
            <summary>
            HAR Races use a subclass of ThingDef which we don't have direct access to, so we need a wrapper class built from reflection.
            </summary>
        </member>
        <member name="M:BigAndSmall.RoosCrushedPelvis_Patch.MakeNewToils_Postfix(RimWorld.JobDriver_Lovin@,Verse.AI.TargetIndex@)">
            <summary>
            For the sake of... consistency? Adds Roos Crushed Pelvis behaviour to giants as well.
            </summary>
        </member>
        <member name="F:BigAndSmall.Piloted.severity">
            <summary>
            To avoid recursion from setting it in a method that will trigger a refresh hitting that very same method.
            </summary>
        </member>
        <member name="P:BigAndSmall.ColorSetting.AllLeatherColors">
            <summary>
            A list of all loaded leathers in the game.
            </summary>
        </member>
        <member name="M:BigAndSmall.ConditionalGraphic.GetState(Verse.Pawn,Verse.PawnRenderNode)">
            <summary>
            "True" means use this graphic (if not chlidren are valid),
            "False" means skip and keep looking.
            "Null" is a valid result, but means that the graphic should be hidden.
            </summary>
            <returns></returns>
        </member>
        <member name="T:BigAndSmall.MultiColorUtils">
            <summary>
            From Rimdark40K collab on 3-color shaders.
            </summary>
        </member>
        <member name="F:BigAndSmall.PawnComplexRenderingProps.isFurskin">
            <summary>
            Hacky but this avoid us making a seperate class for what is basically just changing the texture path.
            </summary>
        </member>
        <member name="T:BigAndSmall.PawnRenderNode_SimpleSwitchesProps">
            <summary>
            This class is essentially a greatly simplified version of UltimateRenderNode, etc, for some common "switch my thing's graphic out if" rules.
            
            Complex Rendernode supports these properties. The Ultimate one does not, it has its own more powerful system.
            
            The main purpose of this node is to make it easier to just copy-paste add/patch compatibility for wings, tails, etc.
            
            If the pawn doesn't have the part at all it won't disable the node, so this only works on pawns that have the part. The
            reason for this is to avoid hiding wings from mods like "Sarg's Alpha Genes" that render wings but don't actually add them to the pawn.
            </summary>
        </member>
        <member name="T:BigAndSmall.PawnRenderingProps_Lite">
            <summary>
            Lightweight version of Ultimate rendering props for quicky setup.
            
            TECHNICALLY supports all the same features as Ultimate, but is intended to be able to be set up quickly,
                and auto-generate many properties.
            </summary>
        </member>
        <member name="M:BigAndSmall.RaceMorpher.SwapThingDef(Verse.Pawn,Verse.ThingDef,System.Boolean,System.Int32,System.Boolean,System.Object,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="pawn"></param>
            <param name="swapTarget"></param>
            <param name="state"></param>
            <param name="targetPriority"></param>
            <param name="force"></param>
            <param name="source"></param>
            <param name="permitFusion"></param>
            <param name="clearHediffsToReapply"></param>
        </member>
        <member name="M:BigAndSmall.RaceViewUIManager.DrawFeature(BigAndSmall.IRacialFeature,BigAndSmall.BSCache,UnityEngine.Rect,System.Boolean,System.Boolean)">
            <summary>
            Draw Race Feature
            </summary>
        </member>
        <member name="F:BigAndSmall.CompProperties_Race.canSwapAwayFrom">
            <summary>
            If TRUE this will let genes and hediffs change the pawn's race without the force command.
            If you want genes that change the body shape to work then this is advised.
            </summary>
        </member>
        <member name="M:BigAndSmall.RaceExtension.SetHediff(Verse.HediffDef)">
            <summary>
            Used only for DefGeneration.
            </summary>
        </member>
        <member name="M:BigAndSmall.FlagString.TryFuseIdentical(BigAndSmall.FlagString)">
            <summary>
            If the mainTag and subTag are identical, merges the extraData dictionaries, preferring this.extraData on key conflicts.
            </summary>
        </member>
        <member name="T:BigAndSmall.Scoreable">
            <summary>
            This is a class which contains one or more IScoreThing objects which acts as components for a score.
            
            By default the highest single score is returned.
            
            If is basically a non-def version of ScorableDef.
            </summary>
        </member>
        <member name="T:BigAndSmall.ScorableDef">
            <summary>
            This is a class which contains one or more IScoreThing objects which acts as components for a score.
            
            By default the highest single score is returned.
            
            If is basically a def version of Scorable.
            </summary>
        </member>
        <member name="M:BigAndSmall.ScoreCalculator.GetScoreFor(System.Object)">
            <summary>
            This is the default implementation of the score calculator.
            </summary>
            <param name="obj">Object to calculate the score for.</param>
            <returns>Highest value, if any. Else null</returns>
        </member>
        <member name="T:BigAndSmall.ScoreData">
            <summary>
            This is a class which calculates a numeric score for a given object.
            </summary>
        </member>
        <member name="F:BigAndSmall.ScoreData.requiredMatchCount">
            <summary>
            If -1, all filters must match. Otherwise, this sets how many filters must match.
            </summary>
        </member>
        <member name="M:BigAndSmall.ScoreData.GetScore(System.Object)">
            <summary>
            Gets the score for a given object.
            </summary>
            <returns>Returns null if the match fails. Otherwise returns 0->100% based on match quality.</returns>
        </member>
        <member name="T:BigAndSmall.AddOrRemoveNeedsAsAppropriate_Patch">
            <summary>
            Avoid having scale calculations be done while needs are being added since this can cause an exception.
            </summary>
        </member>
    </members>
</doc>
